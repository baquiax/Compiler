El diagrama del proyecto puede verse en la siguiente dirección:
	- https://repository.genmymodel.com/baquiax/compiler-cli-design/Compiler/0

El diagrama lo podemos describir de la siguiente manera:

	· Compiler:
		Tenemos nuestra clase principal; Compiler, la cual inicialmente posee sus campos y métodos, es en esta clase donde realizamos la instancia de la clase Scanner.
	· Scanner:
		Nuestra clase Scanner será la encargada de dividir el programa en palabras, los tokens, posee sus campos y métodos, es en esta clase donde realizamos la instancia de la clase CC4Parser.
	· CC4Parser:
		La clase CC4Parser es la encargada de analizar la estructura de los tokens enviados por el Scanner, posee sus campos y métodos, es en esta clase donde realizamos la instancia de la clase Ast.
	· Ast: 
		Nuestra clase Ast es donde tenemos nuestro árbol de sintaxis abstracta, posee sus campos y métodos, es en esta clase donde realizamos la instancia de la clase Semantic
	· Semantic:
		Nuestra clase Semantic es la encargada de analizar que el programa que poseemos tenga sentido, posee sus campos y métodos, es en esta clase donde creamos la instacia de la clase Irt.
	· Irt:
		En nuestra clase Irt, utilizando el árbol de sintaxis, pasandolo a una estructura plana y tomando esa estructura la convertimos a una código de bajo nivel, este no es una arquitectura específica sino una definida por nosotros mismos, posee sus campos y métodos y es en esta clase que creamos la instancia de la clase Codegen; como parte opcional aquí se crean las instancias de las clases Algebraic y ConstantFolding. 
		· Algebraic:
		Es una clase que posee métodos de optimización antes de pasar a generar el nuevo programa.
		· ConstantFolding:
		Es una clase que posee métodos de optimización antes de pasar a generar el nuevo programa.
	· Codegen:
		En esta clase generamos el código para nuestro nuevo programa y finaliza el proceso de compilación.